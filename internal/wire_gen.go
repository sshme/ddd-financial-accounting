// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"ddd-financial-accounting/internal/application/services"
	"ddd-financial-accounting/internal/domain/factories"
	"ddd-financial-accounting/internal/domain/repositories"
	"ddd-financial-accounting/internal/infrastructure/persistence"
	"ddd-financial-accounting/pkg/logger"
	"github.com/google/wire"
	"log/slog"
)

// Injectors from wire.go:

// InitializeApp is the function that will be implemented by wire
func InitializeApp() (*Application, error) {
	bankAccountRepository := provideBankAccountRepository()
	logger := provideLogger()
	bankAccountFactory := provideBankAccountFactory(logger)
	accountFacade := services.NewAccountFacade(bankAccountRepository, bankAccountFactory, logger)
	categoryRepository := provideCategoryRepository()
	categoryFactory := provideCategoryFactory(logger)
	categoryFacade := services.NewCategoryFacade(categoryRepository, categoryFactory, logger)
	operationRepository := provideOperationRepository()
	operationFactory := provideOperationFactory(logger)
	operationFacade := services.NewOperationFacade(bankAccountRepository, categoryRepository, operationRepository, operationFactory, logger)
	application := &Application{
		AccountFacade:   accountFacade,
		CategoryFacade:  categoryFacade,
		OperationFacade: operationFacade,
		Logger:          logger,
	}
	return application, nil
}

// wire.go:

// Application represents the main application with all dependencies
type Application struct {
	AccountFacade   *services.AccountFacade
	CategoryFacade  *services.CategoryFacade
	OperationFacade *services.OperationFacade
	Logger          *slog.Logger
}

func provideLogger() *slog.Logger {
	return logger.SetupLogger()
}

func provideBankAccountRepository() repositories.BankAccountRepository {
	return persistence.NewInMemoryBankAccountRepository()
}

func provideCategoryRepository() repositories.CategoryRepository {
	return persistence.NewInMemoryCategoryRepository()
}

func provideOperationRepository() repositories.OperationRepository {
	return persistence.NewInMemoryOperationRepository()
}

func provideBankAccountFactory(logger2 *slog.Logger) *factories.BankAccountFactory {
	return factories.NewBankAccountFactory(logger2)
}

func provideCategoryFactory(logger2 *slog.Logger) *factories.CategoryFactory {
	return factories.NewCategoryFactory(logger2)
}

func provideOperationFactory(logger2 *slog.Logger) *factories.OperationFactory {
	return factories.NewOperationFactory(logger2)
}

var RepositorySet = wire.NewSet(
	provideBankAccountRepository,
	provideOperationRepository,
	provideCategoryRepository,
)

var FactorySet = wire.NewSet(
	provideBankAccountFactory,
	provideOperationFactory,
	provideCategoryFactory,
)

var ApplicationSet = wire.NewSet(wire.Struct(new(Application), "*"), services.NewOperationFacade, services.NewCategoryFacade, services.NewAccountFacade, provideLogger,
	RepositorySet,
	FactorySet,
)
